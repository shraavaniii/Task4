import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.padding import PKCS7
from cryptography.hazmat.backends import default_backend
from tkinter import Tk, filedialog, Button, Label, Entry, messagebox
import base64

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_file(file_path: str, password: str):
    salt = os.urandom(16)
    key = derive_key(password, salt)
    iv = os.urandom(16)

    with open(file_path, 'rb') as f:
        plaintext = f.read()

    padder = PKCS7(128).padder()
    padded_data = padder.update(plaintext) + padder.finalize()

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()

    encrypted_file_path = file_path + '.enc'
    with open(encrypted_file_path, 'wb') as f:
        f.write(salt + iv + ciphertext)

    messagebox.showinfo("Success", f"File encrypted and saved as {encrypted_file_path}")

def decrypt_file(file_path: str, password: str):
    with open(file_path, 'rb') as f:
        data = f.read()

    salt = data[:16]
    iv = data[16:32]
    ciphertext = data[32:]
    key = derive_key(password, salt)

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    unpadder = PKCS7(128).unpadder()
    plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()

    decrypted_file_path = file_path.replace('.enc', '')
    with open(decrypted_file_path, 'wb') as f:
        f.write(plaintext)

    messagebox.showinfo("Success", f"File decrypted and saved as {decrypted_file_path}")

def select_file(action):
    file_path = filedialog.askopenfilename()
    if file_path:
        password = password_entry.get()
        if not password:
            messagebox.showerror("Error", "Please enter a password.")
            return
        if action == "encrypt":
            encrypt_file(file_path, password)
        elif action == "decrypt":
            decrypt_file(file_path, password)

# GUI Setup
root = Tk()
root.title("File Encryption Tool")

Label(root, text="Password:").grid(row=0, column=0, padx=10, pady=10)
password_entry = Entry(root, show="*", width=30)
password_entry.grid(row=0, column=1, padx=10, pady=10)

Button(root, text="Encrypt File", command=lambda: select_file("encrypt")).grid(row=1, column=0, padx=10, pady=10)
Button(root, text="Decrypt File", command=lambda: select_file("decrypt")).grid(row=1, column=1, padx=10, pady=10)

root.mainloop()
